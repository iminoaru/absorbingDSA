KEYS :-
  - Merge sort is a divide-and-conquer algorithm that recursively divides the input array into smaller halves and merges them in a sorted manner.
  - It has a time complexity of O(n log n), making it efficient for sorting large datasets.
  - Merge sort is stable, meaning it maintains the relative order of equal elements during the sorting process.
  - It requires additional space for merging, making it less memory-efficient compared to other sorting algorithms.
  - Merge sort guarantees sorting even for worst-case scenarios, making it a reliable choice for various applications.
  - It is suitable for sorting linked lists due to its efficient merge operation.
  - Merge sort is not an in-place sorting algorithm since it requires auxiliary space for merging.
  - It is a popular choice for sorting large datasets or when stability is required in the sorting process.
  - Merge sort's main steps are divide, conquer, and merge, which contribute to its efficiency and correctness.
  - It is a comparison-based sorting algorithm that can be easily implemented and understood.
_________________________________________________________________________________________________________________________________________________________________________

APPLICATIONS :-
  - Sorting large datasets:   Merge sort is particularly well-suited for sorting large datasets due to its guaranteed worst-case time complexity of O(n log n).
  - External sorting:   Merge sort is commonly used in external sorting, where the data to be sorted is too large to fit into memory.
  - Custom sorting:   Merge sort can be adapted to handle different input distributions, such as partially sorted, nearly sorted, or completely unsorted data.
  - Inversion Count Problem.


ADVANTAGES :-
  - Stability:   Merge sort is a stable sorting algorithm, which means it maintains the relative order of equal elements in the input array.
  - Guaranteed worst-case performance:   Merge sort has a worst-case time complexity of O(N logN), which means it performs well even on large datasets.
  - Parallelizable:   Merge sort is a naturally parallelizable algorithm, which means it can be easily parallelized to take advantage of multiple processors or threads.
  

DISADVANTAGES :-
  - Space complexity:   Merge sort requires additional memory to store the merged sub-arrays during the sorting process. 
  - Not in-place:   Merge sort is not an in-place sorting algorithm, which means it requires additional memory to store the sorted data. 
    This can be a disadvantage in applications where memory usage is a concern.
  - Not always optimal for small datasets:   For small datasets, Merge sort has a higher time complexity than some other sorting algorithms, such as insertion sort. 
    This can result in slower performance for very small datasets.

